おつかれさまです、相澤です。
今日からRuby on RailsによるWebアプリケーションの開発手法を連載します。
質問や突込みなどはこのメールに返信してください。

Railsとは

Ruby on Rails（ルビーオンレイルズ）はオープンソースのWebアプリケーションフレームワークです。
Rubyによる柔軟な記述、メタプログラミングを活用してMVCアーキテクチャに基づくWebアプリケーションを高速に開発することが可能です。

Railsの哲学は２つの要素に支えられています。
・CoC（Conversion over Configuration：規約に従うことによって設定を不要とする）
・DRY（Don't Replay Yourself：同じことを繰り返さない）
RailsではRailsの作法に従ってコードを記述することで、従来必要だった設定ファイルをほとんど書くことなく、また必要な情報はアプリケーションのただ一箇所に記述することで必要な処理を実現することが可能です。
その体表的な例がRailsのORマッピングで使用されるActiveRecordです。
ActiveRecordでは

　・テーブル名をモデルクラスの複数形とする
　・主キーはidというカラムで整数型の自動インクリメント属性とする

　という２つの規約を守ることでデータベースとの連携をほとんどコーディングすることなく実現することが可能です。また、テーブルにどんなカラムが存在するかはデータベースのスキーマ情報を参照するため従来のドメインオブジェクトのようにテーブルカラムと一対のフィールドを定義しなくても、それが存在するかのごとく取り扱うことができます。

このようにRailsを用いることで従来の開発で必要だった設定ファイル（xmlで記述されることが多い）を書く必要が無くなり、開発者はアプリケーションの機能の本質部分だけを実装することに集中することができます。だたし、Railsによる高い生産性を得るためにはRailsの作法（規約）について十分に習熟している必要があり、Railsの作法によらない動作を実現しようとする場合にはとたんに開発が難しくなるという欠点もあります。
そのため、Railsによる開発の基本戦略は第一に「Railsの規約に則って開発する」ことが成功のカギとなります。
Railsの作法を習得するために最も効果的な方法は、Railsを使用して実際にアプリケーションを構築することです。それでは実際にRailsを使用して簡単なアプリケーションを作成してみましょう。

STEP0. 開発環境の準備

Ruby本体のバージョンが1.8.6以上である必要があります。Rubyのバージョンを確認するためには下記のコマンドを実行します。（もちろん環境変数の設定も忘れずにおこなってください）

ruby -v

また、Railsを使用するためにはいくつかのRubyのライブラリがあらかじめインストールされている必要があります。これらはいずれもRubyGemsによってオンラインでインストールすることが可能です。
Rails本体は下記のコマンドでインストールできます。

gem install rails
railsのインストールをおこなうと、依存する以下のライブラリも同時にインストールされます。

・ActiveSupport
　Railsアプリケーションで使用されるさまざまなコア拡張ライブラリ
・ActionPack
　RailsアプリケーションのView、Controller部分を実現するライブラリ
・ActiveRecord
　Rails標準のORマッピングのためのライブラリ
・ActiveResource
　外部リソースをシームレスに取り扱うためのライブラリ
・ActionMailer
　メールに関する操作をおこなうためのライブラリ

railsが正しくインストールされたことを確認するには以下のコマンドを実行します。

rails -v
なおこの連載ではとくに言及がない限りRails 2.3.2をインストールしたものとして進めていきます。

また、Railsでアプリケーションを構築する場合にさまざまな一連のタスクを実行するためにRakeというライブラリが必要です。Rakeをインストールするには下記のコマンドを実行します。

gem install rake

RubyGemsのバージョンが古い場合には上記のコマンドが失敗したり、Railsが上手く動かなかったりします。RubyGemsのバージョンは1.3.1以上のものを使用してください。RubyGemsのバージョンを確認するためには下記のコマンドを実行します。

gem -v

古いRubyGemsを更新するには下記のコマンドを実行します。

gem install rubygems-update

さらにその後、下記のコマンドを実行することでRubyGemsを更新することが可能です。

update_rubygems

また1.3.1以上のバージョンのRubyGemsを最新のものに更新するためには下記のコマンドを実行します。

gem update --system

さらにデータベースとの接続をおこなうために、対応するRDBMS用のドライバが必要です。この連載ではRDBMSにSQLite3を利用しますので、下記のコマンドでSQLite3のドライバをインストールしてください。

gem install sqlite3-ruby

Debian系のLinuxではあらかじめruby-devとlibsqlite3-devがインストールされていないとインストールに失敗します。これらのライブラリは下記のコマンドでインストールします。
apt-get install ruby-dev
apt-get install libsqlite3-dev

Windows環境では提供されているgemの都合により最新版のドライバをインストールすることができません。Windows環境で作業をする場合は下記のコマンドでバージョン1.2.3をインストールします。

gem install sqlite3-ruby --version '=1.2.3'

sqlite3-rubyが正常にインストールされればRailsからのテーブル操作は可能ですが直接DBファイルの中身をみるときのためにSQLite3本体もインストールしておくと便利です。
SQLite3本体は下記のサイトからダウンロードしてください。

・SQLite Download Page
　http://www.sqlite.org/download.html

Windows環境用にコンパイルされたものはsqlite-3_6_14.zipです。ページの中ほどにリンクがあります。
zipファイルを解凍するとsqlite3.exeが取得できますこれをパスの通ったフォルダにコピーすればインストールは完了です。正常に起動することを確認するにはコマンドプロンプトで以下のコマンドを実行します。

sqlite3 --version

なお、Debian系のLinux環境では下記のコマンドを実行するとインストールされます。

aot-get install sqlite3

STEP1. Railsアプリケーションの雛形を作成する

railsコマンドを用いて任意の場所にアプリケーションの雛形を作成することができます。
この連載では作業フォルダをC:\workにしたものとしてすすめていきます。異なるフォルダを作業フォルダにした場合には適宜読み替えてください。

まずコマンドプロンプトでC:\workに移動して下記のコマンドを実行します。

rails todo

todoの部分がプロジェクト名になります。アプリケーションの挙動には影響しないので何でも構いません。
実行結果は以下のようになり、雛形となるフォルダやファイルが自動的に作成されます。

C:\work>rails todo
      create
      create  app/controllers
      create  app/helpers
      create  app/models
      create  app/views/layouts
　　　（中略）
      create  log/server.log
      create  log/production.log
      create  log/development.log
      create  log/test.log

workの中にtodoというディレクトリが作成され、その中に雛形の構成が作成されていることを確認してください。以下の説明ではこのtodoディレクトリのパスをRAILS_ROOTと表記します。RAILS_ROOT直下に作成される各ファイル・ディレクトリの役割は下記のとおりです。
　app：Railsアプリケーションの本体が格納される場所
　config：Railsアプリケーションの設定ファイルが格納される場所
　db：Railsアプリケーションが使用するDBのマイグレーション情報、スキーマ情報が格納される場所
　doc：Railsアプリケーションのドキュメント類が格納される場所
　lib：Railsアプリケーションで使用するライブラリを格納する場所
　log：サーバーの実行ログなどが格納される場所
　public：静的なHTMLファイルなどが格納される場所
　Rakefile：Railsアプリケーションを開発するために必要な一連の自動実行タスクを定義しているファイル
　README：Railsアプリケーションの説明を記述するファイル
　script：Railsアプリケーションを開発するために必要なスクリプト類が格納される場所
　test：Railsアプリケーションのテストスクリプトが格納される場所
　tmp：一時ファイルが格納される場所
　vendor：機能拡張のためのプラグインが格納される場所

STEP2. Railsアプリケーションを作成する

それではrailsアプリケーションの雛形ができたので、さっそくToDo管理をおこなう簡単なアプリケーションを作成してみます。
Railsで最も簡単にアプリケーションを作成するためにはscaffoldという機能を使用するのが一般的です。
RAILS_ROOTで下記のコマンドを実行します。

ruby script\generate scaffold todo title:string due:date priority:integer

上記のコマンドはscriptディレクトリにあるgenerateスクリプトのscaffold機能を実行するものです。
generateスクリプトでscaffoldを実行するときの書式は下記のとおりです。

generate scaffold モデル名（単数形）[カラム名:型] ...

モデル名はDBのテーブルに紐付くモデルクラスの名前を指定します。Railsの作法に従う場合、モデル名は名詞の単数形にします。今回はToDoリストを作成するのでモデル名はtodoとしました。このモデルクラスに関連付けられるテーブル名は自動的にtodos（モデル名の複数形）になります。
モデル名に引き続いて指定するのはそのモデル（≒テーブル）にもたせるカラムに関する情報です。とりあえずToDo管理に必要になりそうな3つのカラム（title、due、priority）を指定しています。カラム名の:（コロン）の右側にはそのカラムの型を指定します。今回はtitleは文字列型、dueは日付型、priorityは整数型としました。

なお、このときに指定できる型の一覧は下記のとおりです。

　string：文字列型
　text：テキスト型
　integer：整数型
　float：浮動小数点型
　decimal：固定小数点型
　datetime：日付時刻型
　timestamp：タイムスタンプ型
　time：時刻型
　date：日付型
　binary：バイナリ型
　boolean：真偽値型

ここまでの作業でRuby側のアプリケーション構築は完了です。（これだけです！）あとは今作成したスキーマ情報をDBに反映させる必要があります。
どのようなスキーマ情報がDBに反映されるかを確認するためにはRAILS_ROOT\db\migrateに作成された20090507171612_create_todos.rbというファイルをみます。数字の部分はgenerateスクリプトを実行した時間のタイムスタンプです。

20090507171612_create_todos.rb
----
class CreateTodos < ActiveRecord::Migration
  def self.up
    create_table :todos do |t|
      t.string :title
      t.date :due
      t.integer :priority

      t.timestamps
    end
  end

  def self.down
    drop_table :todos
  end
end

スキーマ情報はRubyのDSL（Domain Specific Language：ドメイン固有言語）としての機能を生かしてRubyコードとして記述されています。
今回の場合CreateTodosというクラスに２つのクラスメソッド（正確には特異メソッド）upとdownが定義されました。upはDBへのスキーマ情報の反映を進めるときに実行され、downはスキーマ情報をロールバックするときに実行されます。

SQLを理解していればupメソッドやdownメソッドが何をしているか理解できますよね？upメソッドはSQLの

　create table todos ( 
　　title string, 
　　due date, 
　　priority integer
　);

とほぼ同義ですが、Railsの規約により暗黙につくられるカラムを含めると完全に等価なSQLは下記のようになります。

　create table todos ( 
　　id integer primary key autoincliment, -- 主キーはidという名前で整数型の自動インクリメント
　　title string, 
　　due date, 
　　priority integer,
　　created_at timestamp, -- レコード作成タイムスタンプがセットされる
　　updated_at timestamp  -- レコード最終更新タイムスタンプがセットされる
　);

同様にdownメソッドは

　drop teble todos;

と等価です。upやdownの中で使用されているcreate_tableメソッドやdrop_tableメソッドはActiveRecord::ConnectionAdapters::SchemaStatementsモジュールに定義されています。メソッドの詳細は下記のURLを参照してください。

　Rials API/Module
　ActiveRecord::ConnectionAdapters::SchemaStatements
　http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html

STEP3. スキーマ情報をマイグレートする

さて、それではこのスキーマ情報をDBに反映させてみましょう。スキーマ情報をDBに反映させることをマイグレートするといいます。
マイグレートをするにはRakeを用いるのが簡単です。RAILS_ROOTで下記のコマンドを実行します。

C:\work\todo>rake db:migrate
(in C:/work/todo)
==  CreateTodos: migrating ====================================================
-- create_table(:todos)
   -> 0.0160s
==  CreateTodos: migrated (0.0160s) ===========================================

マイグレートに成功すると上のような実行結果となります。このとき実行されたのはさきほどのupメソッドです。
ちなみに今おこなったマイグレートを取り消したい場合（ロールバックしたい）は以下のコマンドを実行します。

C:\work\todo>rake db:rollback
(in C:/work/todo)
==  CreateTodos: reverting ====================================================
-- drop_table(:todos)
   -> 0.0000s
==  CreateTodos: reverted (0.0160s) ===========================================

このときに実行されたのはdownメソッドです。
rakeに指定したdb:migrateやdb:rollbackのことをRakeタスクといいます。RakeタスクはRAILS_ROOT\Rakefileに定義されており、自分で追加することも可能です。現在使用できるRakeタスクの一覧をみるには以下のようにコマンドを実行します。

C:\work\todo>rake --task
(in C:/work/todo)
rake db:abort_if_pending_migrations       # Raises an error if there are pe...
rake db:charset                           # Retrieves the charset for the c...
rake db:collation                         # Retrieves the collation for the...
rake db:create                            # Create the database defined in ...
　　　（中略）
rake tmp:clear                            # Clear session, cache, and socke...
rake tmp:create                           # Creates tmp directories for ses...
rake tmp:pids:clear                       # Clears all files in tmp/pids
rake tmp:sessions:clear                   # Clears all files in tmp/sessions
rake tmp:sockets:clear                    # Clears all files in tmp/sockets

各Rakeタスクの詳細な機能は出力結果の右側のコメントをみてください。

スキーマ情報をrollbackしてしまったので忘れずにrake db:migrateを実行しておいてください。
なんとこれでRailsアプリケーションは完成です。

STEP4. サーバーを起動し動作確認をする

それでは実際にRailsアプリケーションを動作させて動きを確認してみましょう。
Railsにはアプリケーションサーバーの起動スクリプトもそろっています。とくに何もしない状態ではRuby標準添付のWEBRickサーバーをテスト用として用います。WEBRickサーバーは本番用のサーバーとしては力不足ですが機能レベルの単体テストをおこなうには十分です。
サーバーを起動するにはRAILS_ROOTで以下のコマンドを実行します。

C:\work\todo>ruby script\server
=> Booting Mongrel
=> Rails 2.3.2 application starting on http://0.0.0.0:3000
=> Call with -d to detach
=> Ctrl-C to shutdown server

サーバーがlocalhostの3000番ポートで起動しました。ブラウザで http://localhost:3000 にアクセスしてみましょう。
"Welcome aboard"というタイトルのページが表示されましたか？これがRailsのデフォルトのトップ画面です。それでは先ほど作成したToDo管理アプ理ケーションにアクセスしてみます。以下のURLをブラウザのアドレスバーに入力してください。

http://localhost:3000/todos

"Listing todos"というタイトルのページが表示されていれば成功です。todosテーブルに対するCRUD操作を備えたWebアプリケーションが既に動作しています。ためしにいくつかのToDoを入力してみましょう。新しいToDoを作成するには"New todo"というリンクをクリックします。

"New todo"という画面が表示されたはずです。dueの入力欄が日付を入力するセレクトボックスになっているのに気がついたでしょうか。これはスキーマ情報を作成するときに日付型を指定したのでRailsが自動的に生成したものです。
なにか適当なToDoを入力して「Create」ボタンを押すとToDoの作成が成功した旨のメッセージが表示されますね。Backリンクをクリックして"Listing todos"画面に戻ると、確かにToDoが作成されています。

"Listing todos"画面のToDoの横に表示されるShowで表示、Editで編集、Destroyで削除ができます。削除の時にはちゃんと「Are you sure?」という確認のポップアップまで表示されます。気が利いていますね。

ToDoアプリケーションの動作を一通り確認したら今回は終了です。起動したサーバーを停止するにはサーバーを起動したコマンドプロンプトでCtrl-Cを押します。Windows環境ではまれにサーバーの停止ができないことがあります。その場合はタスクマネージャーを起動してruby.exeのプロセスを強制終了してください。

次回はこのToDoリストを改造していきます。


